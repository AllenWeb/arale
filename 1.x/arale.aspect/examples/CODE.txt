function classA() {
    this.a = 1;
}
classA.prototype.func1 = function(a, b) {
    console.log('func1');
    return a + b;
};

var traceObj = {
    before: function() {
        var jp = $Aspect.getContext().joinPoint;
        console.log('before', jp.targetName, arguments);
    },
    after: function() {
        console.log('after', arguments);
    },
    around: function() {
        if (!check()) return false; //在这里可以加入我们的添加判断
        //获取调用此方法时的参数, 并通过,连接起来 
        var args =[].join.call(arguments, ", ");
        //打印正在被advice方法的name
        var methodName =  arale.aspect.getContext().joinPoint.targetName;
        console.log('methodName-->' + methodName);
        //获取被advice的对象的实例
        console.log('instance-->' + arale.aspect.getContext().instance);
        //执行被advice的方法, 并获取返回值
        var retVal = $Aspect.proceed.apply(null, arguments);
        console.log(" <= around " + methodName+ " returns " + retVal);
        return retVal;	// should return a value, if the target returns a value
    },
    afterReturning: function(rtv) {
        console.log('afterReturning', rtv);
    },
    afterThrowing: function() {
        console.log('afterThrowing', arguments);
    }
};
var obj = new classA();

arale.aspect.advise(obj, 'func1', traceObj);
var r = obj.func1(1, 2);
console.log(r);
